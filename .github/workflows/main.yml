name: Go

on:
  workflow_dispatch:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ 'main' ]

jobs:

  buildtestcover:
    name: Build, test and cover using Go tools
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.18

    - name: Build
      run: go build -v ./...

    # See https://about.codecov.io/blog/getting-started-with-code-coverage-for-golang/.
    # Somehow, any file extension of the coverage file will not be present on Windows Server, no clue why.
    # But this is also why we need to search for the file without extension when publishing the report.
    - name: Test and cover
      run: go test -v ./... -race -coverprofile=coverage -covermode=atomic
      
    - name: Publish coverage report
      uses: codecov/codecov-action@master
      with:
        directory: GITHUB_WORKSPACE
        files: coverage
        fail_ci_if_error: true
        verbose: true
      
  lint:
    name: Run a linter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@master
      with:
        # version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
        version: latest
        args: --config ./.github/configs/.golangci.yml
        # if set to true and the action runs on a pull request - the action outputs only newly found issues
        only-new-issues: false
        # if set to true then action uses pre-installed Go
        skip-go-installation: false
        # if set to true then the action don't cache or restore ~/go/pkg.
        skip-pkg-cache: true
        # if set to true then the action don't cache or restore ~/.cache/go-build.
        skip-build-cache: true

  gosec:
    name: Scan code for security issues
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: golang-security-action
      uses: securego/gosec@master
